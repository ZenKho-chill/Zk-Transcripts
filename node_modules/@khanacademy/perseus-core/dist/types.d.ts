export interface KeypadContextRendererInterface {
    blur(): void;
}
type State = any;
export interface RendererInterface {
    getSerializedState(): State;
    restoreSerializedState(state: State, callback?: () => void): void;
    blur(): void;
    focus(): boolean | null | undefined;
    props: any;
}
export type KEScore = {
    empty: boolean;
    correct: boolean;
    message?: string | null | undefined;
    suppressAlmostThere?: boolean | null | undefined;
    guess: any;
    state: any;
};
export type MarkerType = {
    answers: ReadonlyArray<string>;
    label: string;
    x: number;
    y: number;
};
export type InteractiveMarkerType = MarkerType & {
    selected?: ReadonlyArray<string>;
    showCorrectness?: "correct" | "incorrect";
    focused?: boolean;
};
export type Relationship = "lt" | "gt" | "le" | "ge";
export type Alignment = "default" | "block" | "inline-block" | "inline" | "float-left" | "float-right" | "full-width";
export {};
