import type { LinearType, QuadraticType, SinusoidType, TangentType, ExponentialType, LogarithmType, AbsoluteValueType } from "./grapher-types";
export declare const MOVABLES: {
    PLOT: string;
    PARABOLA: string;
    SINUSOID: string;
};
declare const functionTypeMapping: {
    readonly linear: LinearType;
    readonly quadratic: QuadraticType;
    readonly sinusoid: SinusoidType;
    readonly tangent: TangentType;
    readonly exponential: ExponentialType;
    readonly logarithm: LogarithmType;
    readonly absolute_value: AbsoluteValueType;
};
export declare const allTypes: any;
export type FunctionTypeMappingKeys = keyof typeof functionTypeMapping;
type ConditionalGraderType<T extends FunctionTypeMappingKeys> = T extends "linear" ? LinearType : T extends "quadratic" ? QuadraticType : T extends "sinusoid" ? SinusoidType : T extends "tangent" ? TangentType : T extends "exponential" ? ExponentialType : T extends "logarithm" ? LogarithmType : T extends "absolute_value" ? AbsoluteValueType : never;
export declare function functionForType<T extends FunctionTypeMappingKeys>(type: T): ConditionalGraderType<T>;
export {};
