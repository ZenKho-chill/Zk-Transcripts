import type { Parser } from "../parser-types";
type Primitive = number | string | boolean | null | undefined;
/**
 * discriminatedUnion() should be preferred over union() when parsing a
 * discriminated union type, because discriminatedUnion() produces more
 * understandable failure messages. It takes the discriminant as the source of
 * truth for which variant is to be parsed, and expects the other data to match
 * that variant.
 */
export declare function discriminatedUnionOn<DK extends string>(discriminantKey: DK): DiscriminatedUnionBuilder<DK, never>;
declare class DiscriminatedUnionBuilder<DK extends string, Union extends {
    [k in DK]: Primitive;
}> {
    private discriminantKey;
    parser: Parser<Union>;
    constructor(discriminantKey: DK, parser: Parser<Union>);
    withBranch<Variant extends {
        [k in DK]: Primitive;
    }>(discriminantValue: Primitive, parseNewVariant: Parser<Variant>): DiscriminatedUnionBuilder<DK, Union | Variant>;
}
export {};
