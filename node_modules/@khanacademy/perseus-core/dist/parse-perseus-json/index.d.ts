import type { Result } from "./result";
import type { PerseusItem, PerseusArticle } from "../data-schema";
/**
 * Helper to parse PerseusItem JSON
 * Why not just use JSON.parse? We want:
 * - To make sure types are correct
 * - To give us a central place to validate/transform output if needed
 * @deprecated - use parseAndMigratePerseusItem instead
 * @param {string} json - the stringified PerseusItem JSON
 * @returns {PerseusItem} the parsed PerseusItem object
 */
export declare function parsePerseusItem(json: string): PerseusItem;
export type ParseFailureDetail = {
    /**
     * A human-readable error message describing where in the object tree
     * parsing failed.
     */
    message: string;
    /**
     * The raw result of parsing the input JSON, with no migrations applied.
     * Use at your own risk.
     */
    invalidObject: unknown;
};
/**
 * Parses a PerseusItem from a JSON string, migrates old formats to the latest
 * schema, and runtime-typechecks the result. Use this to parse assessmentItem
 * data.
 *
 * @returns a {@link Result} of the parsed PerseusItem. If the result is a
 * failure, it will contain an error message describing where in the tree
 * parsing failed.
 * @throws SyntaxError if the argument is not well-formed JSON.
 */
export declare function parseAndMigratePerseusItem(json: string): Result<PerseusItem, ParseFailureDetail>;
/**
 * Parses a PerseusArticle from a JSON string, migrates old formats to the
 * latest schema, and runtime-typechecks the result.
 *
 * @returns a {@link Result} of the parsed PerseusArticle. If the result is a
 * failure, it will contain an error message describing where in the tree
 * parsing failed.
 * @throws SyntaxError if the argument is not well-formed JSON.
 */
export declare function parseAndMigratePerseusArticle(json: string): Result<PerseusArticle, ParseFailureDetail>;
